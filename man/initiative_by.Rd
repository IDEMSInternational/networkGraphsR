% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/initiative_by.R
\name{initiative_by}
\alias{initiative_by}
\title{"Initiative_by"}
\usage{
initiative_by(
  initiative_data,
  by = "pays",
  sep = ".",
  filter_var = NULL,
  filter_vals = NULL,
  node_size = c("type", "age"),
  group = NULL,
  font_size = 7,
  height = NULL,
  width = NULL,
  colour_scale = JS("d3.scaleOrdinal(d3.schemeCategory20);"),
  font_family = "serif",
  link_distance = 50,
  link_width = JS("function(d) { return Math.sqrt(d.value); }"),
  radius_calculation = "4*Math.sqrt(d.nodesize)+2",
  charge = -30,
  link_colour = "#666",
  opacity = 0.6,
  zoom = FALSE,
  arrows = FALSE,
  bounded = FALSE,
  display_labels = 0,
  click_action = NULL
)
}
\arguments{
\item{initiative_data}{a data frame object containing the initiative data}

\item{by}{the values around which nodes are formed}

\item{filter_var}{filtered variable}

\item{filter_vals}{values associated to the filter}

\item{node_size}{character string specifying the a column in the \code{initiative_data} data frame with some value to vary the node radius's with. See also \code{radiusCalculation}.}

\item{group}{character string specifying the group of each node in the \code{initiative_data} data frame.}

\item{font_size}{numeric font size in pixels for the node text labels.}

\item{height}{numeric height for the network graph's frame area in pixels.}

\item{width}{numeric width for the network graph's frame area in pixels.}

\item{colour_scale}{character string specifying the categorical colour scale for the nodes. See https://github.com/d3/d3/blob/master/API.md#ordinal-scales.}

\item{font_family}{font family for the node text labels.}

\item{link_distance}{numeric or character string. Either numberic fixed distance between the links in pixels (actually arbitrary relative to the diagram's size). Or a JavaScript function, possibly to weight by Value. For example: linkDistance = JS("function(d){return d.value * 10}").}

\item{link_width}{numeric or character string. Can be a numeric fixed width in pixels (arbitrary relative to the diagram's size). Or a JavaScript function, possibly to weight by Value. The default is linkWidth = JS("function(d) { return Math.sqrt(d.value); }").}

\item{radius_calculation}{character string. A javascript mathematical expression, to weight the radius by Nodesize. The default value is radiusCalculation = JS("Math.sqrt(d.nodesize)+6").}

\item{charge}{numeric value indicating either the strength of the node repulsion (negative value) or attraction (positive value).}

\item{link_colour}{character vector specifying the colour(s) you want the link lines to be. Multiple formats supported (e.g. hexadecimal).}

\item{opacity}{numeric value of the proportion opaque you would like the graph elements to be.}

\item{zoom}{logical value to enable (TRUE) or disable (FALSE) zooming.}

\item{arrows}{logical value to enable directional link arrows.}

\item{bounded}{logical value to enable (TRUE) or disable (FALSE) the bounding box limiting the graph's extent. See http://bl.ocks.org/mbostock/1129492.}

\item{display_labels}{}

\item{click_action}{character string with a JavaScript expression to evaluate when a node is clicked.}
}
\value{
Returns a network graph object
}
\description{
This function is a wrapper function for \code{networkD3::forceNetwork}.
explain what it does -
}
\examples{
# todo
}
